%% File generated by elpi -document-builtins, do not edit


%  == Core builtins =====================================

%  -- Logic --

pred true.

true.

pred fail.

pred false.

pred (=) o:A, o:A.

X = X.

(A ; _) :- A.

(_ ; B) :- B.

kind list type -> type.

type (::) X -> list X -> list X.

type ([]) list X.

type (:-) prop -> prop -> prop.

type (:-) prop -> list prop -> prop.

type (,) variadic prop prop.

type uvar A.

type (as) A -> A -> A.

type (=>) prop -> prop -> prop.

type (=>) list prop -> prop -> prop.

%  -- Control --

external pred !. % The cut operator

pred not i:prop.

not X :- X, !, fail.

not _.

% [declare_constraint C Key] declares C with Key (a variable or
% a list of variables).
external pred declare_constraint i:any, i:any.

external pred print_constraints. % prints all constraints

% [halt] halts the program
external pred halt .

stop :- halt.

%  -- Evaluation --

% [is_ Out Expr] unifies Out with the value of Expr
external pred is_ o:A, i:A.

pred (is) o:A, i:A.

X is Y :- is_ X Y.

type (-) A -> A -> A.

type (^) string -> string -> string.

type (+) int -> int -> int.

type (+) float -> float -> float.

type (*) int -> int -> int.

type (*) float -> float -> float.

%  -- Arithmetic tests --

% [lt_ X Y] checks if X < Y. Works for string, int and float
external pred lt_ i:A, i:A.

% [gt_ X Y] checks if X > Y. Works for string, int and float
external pred gt_ i:A, i:A.

% [le_ X Y] checks if X =< Y. Works for string, int and float
external pred le_ i:A, i:A.

% [ge_ X Y] checks if X >= Y. Works for string, int and float
external pred ge_ i:A, i:A.

X  < Y  :- lt_ X Y.

X i< Y  :- lt_ X Y.

X r< Y  :- lt_ X Y.

X s< Y  :- lt_ X Y.

X  > Y  :- gt_ X Y.

X i> Y  :- gt_ X Y.

X r> Y  :- gt_ X Y.

X s> Y  :- gt_ X Y.

X  =< Y :- le_ X Y.

X i=< Y :- le_ X Y.

X r=< Y :- le_ X Y.

X s=< Y :- le_ X Y.

X  >= Y :- ge_ X Y.

X i>= Y :- ge_ X Y.

X r>= Y :- ge_ X Y.

X s>= Y :- ge_ X Y.

%  == I/O builtins =====================================

%  -- I/O --

macro @in_stream :- ctype "in_stream".

macro @out_stream :- ctype "out_stream".

type std_in @in_stream.

type std_out @out_stream.

type std_err @out_stream.

% [open_in FileName InStream] opens FileName for input
external pred open_in i:string, o:@in_stream.

% [open_out FileName OutStream] opens FileName for output
external pred open_out i:string, o:@out_stream.

% [open_append FileName OutStream] opens FileName for output in append mode
external pred open_append i:string, o:@out_stream.

% [close_in InStream] closes input stream InStream
external pred close_in i:@in_stream.

% [close_out OutStream] closes output stream OutStream
external pred close_out i:@out_stream.

% [output OutStream Data] writes Data to OutStream
external pred output i:@out_stream, i:string.

% [flush OutStream] flush all output not yet finalized to OutStream
external pred flush i:@out_stream.

% [input InStream Bytes Data] reads Bytes from InStream
external pred input i:@in_stream, i:int, o:string.

% [input_line InStream Line] reads a full line from InStream
external pred input_line i:@in_stream, o:string.

% [eof InStream] checks if no more data can be read from InStream
external pred eof i:@in_stream.

%  -- System --

% [gettimeofday T] sets T to the number of seconds elapsed since 1/1/1970
external pred gettimeofday o:float.

% [getenv VarName Out] unifies Out with the value of VarName in the process'
% environment. Fails if no such environment variable exists
external pred getenv i:string, o:string.

% [system Command RetVal] executes Command and sets RetVal to the exit code
external pred system i:string, o:int.

%  -- Debugging --

% [term_to_string T S] prints T to S
external pred term_to_string i:any, o:string.

% == Lambda Prolog builtins =====================================

%  -- Extra I/O --

% [open_string DataIn InStream] opens DataIn as an input stream
external pred open_string i:string, o:@in_stream.

% [lookahead InStream NextChar] peeks one byte from InStream
external pred lookahead i:@in_stream, o:string.

%  -- Hacks --

% [string_to_term S T] parses a term T from S
external pred string_to_term i:string, o:any.

% [readterm InStream T] reads T from InStream
external pred readterm i:@in_stream, o:any.

printterm S T :- term_to_string T T1, output S T1.

read S :- flush std_out, input_line std_in X, string_to_term X S.

% == Elpi builtins =====================================

% [dprint ...] prints raw terms (debugging)
external type dprint variadic any prop.

% [print ...] prints terms
external type print variadic any prop.

% [counter Name Value] reads the Value of a trace point Name
external pred counter i:string, o:int.

% [rex_match Rex Subject] checks if Subject matches Rex. Matching is based
% on OCaml's Str library
external pred rex_match i:string, i:string.

% [rex_replace Rex Replacement Subject Out] Out is obtained by replacing all
% occurrences of Rex with Replacement in Subject. See also OCaml's
% Str.global_replace
external pred rex_replace i:string, i:string, i:string, o:string.

% [quote_syntax FileName QueryText QuotedProgram QuotedQuery] quotes the
% program from FileName and the QueryText. See elpi_quoted_syntax.elpi for
% the syntax tree
external pred quote_syntax i:string, i:string, o:list A, o:A.

% == Elpi nonlogical builtins =====================================

kind ctype type.

type ctype string -> ctype.

macro @safe :- ctype "safe".

% [var any term] checks if the term is a variable
external pred var i:any.

% [same_var first term second term] checks if the two terms are the same
% variable
external pred same_var i:A, i:A.

% [name T] checks if T is a eigenvariable
external pred name i:any.

external pred names % generates the list of eigenvariable
  o:list any. % list of eigenvariables in order of age (young first)
  
external pred occurs % checks if the constant occurs in the term
  i:A, % a constant (global or eigenvariable)
  i:A. % a term
  
% [closed_term T] unify T with a variable that has no eigenvariables in
% scope
external pred closed_term o:any.

% [is_cdata T Ctype] checks if T is primitive of type Ctype, eg (ctype
% "int")
external pred is_cdata i:any, o:ctype.

primitive? X S :- is_cdata X (ctype S).

% [new_int N] unifies N with a different int every time it is called
external pred new_int o:int.

% [new_safe Safe] creates a safe: a store that persists across backtracking
external pred new_safe o:@safe.

% [stash_in_safe Safe Data] stores Data in the Safe
external pred stash_in_safe i:@safe, i:any.

% [open_safe Safe Data] retrieves the Data stored in Safe
external pred open_safe i:@safe, o:list any.




