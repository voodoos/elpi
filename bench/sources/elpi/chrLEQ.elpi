mode (leq i i).
leq (uvar as A) (uvar as B) :- !,  declare_constraint (leq A B) [A,B].
leq A         (uvar as B) :- !,  declare_constraint (leq A B) [B].
leq (uvar as A) B         :- !,  declare_constraint (leq A B) [A].

mode (ltn i i).
ltn (uvar as A) (uvar as B) :- !,  declare_constraint (ltn A B) [A,B].
ltn A         (uvar as B) :- !,  declare_constraint (ltn A B) [B].
ltn (uvar as A) B         :- !,  declare_constraint (ltn A B) [A].

main :-
  leq A B, leq B C, not (ltn C A), ltn A B, not(A = C).

constraint leq ltn {
  % incompat (FIRST!!)
  rule (leq X Y) (ltn Y1 X1) | (X = X1, Y = Y1) <=> false.
  rule (ltn X Y) (ltn Y1 X1) | (X = X1, Y = Y1) <=> false.
  rule (ltn X Y) | (X = Y) <=> false.
  
  % refl
  rule \ (leq X Y) | (X = Y).

  % atisym
  rule (leq X Y) \ (leq Y1 X1) | (X = X1, Y = Y1) <=> (Y = X).

  % trans
  rule (leq X Y) (leq Y1 Z) | (Y = Y1) <=> (leq X Z).
  rule (leq X Y) (ltn Y1 Z) | (Y = Y1) <=> (ltn X Z).
  rule (ltn X Y) (leq Y1 Z) | (Y = Y1) <=> (ltn X Z).
  rule (ltn X Y) (ltn Y1 Z) | (Y = Y1) <=> (ltn X Z).

  % idempotence
  rule (leq X Y) \ (leq X1 Y1) | (X = X1, Y = Y1).
  rule (ltn X Y) \ (ltn X1 Y1) | (X = X1, Y = Y1).

}

% vim:set ft=lprolog:
